// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinFormsApp1;

#nullable disable

namespace WinFormsApp1.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CajaAhorroUsuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdCajaAhorro")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario", "IdCajaAhorro");

                    b.HasIndex("IdCajaAhorro");

                    b.ToTable("CajasUsuario");
                });

            modelBuilder.Entity("CajaDeAhorro", b =>
                {
                    b.Property<int>("IdCajaAhorro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCajaAhorro"));

                    b.Property<int>("Cbu")
                        .HasColumnType("int");

                    b.Property<float>("Saldo")
                        .HasColumnType("real");

                    b.HasKey("IdCajaAhorro");

                    b.ToTable("CajaDeAhorro", (string)null);
                });

            modelBuilder.Entity("Movimiento", b =>
                {
                    b.Property<int>("IdMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMovimiento"));

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdCajaAhorro")
                        .HasColumnType("int");

                    b.Property<float>("Monto")
                        .HasColumnType("real");

                    b.HasKey("IdMovimiento");

                    b.HasIndex("IdCajaAhorro");

                    b.ToTable("Movimiento", (string)null);
                });

            modelBuilder.Entity("Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("IsPagado")
                        .HasColumnType("bit");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<float>("Monto")
                        .HasColumnType("real");

                    b.HasKey("IdPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pago", (string)null);
                });

            modelBuilder.Entity("PlazoFijo", b =>
                {
                    b.Property<int>("IdPlazoFijo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlazoFijo"));

                    b.Property<int>("CbuAPagar")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaIni")
                        .HasColumnType("date");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("IsPagado")
                        .HasColumnType("bit");

                    b.Property<float>("Monto")
                        .HasColumnType("real");

                    b.Property<float>("Tasa")
                        .HasColumnType("real");

                    b.HasKey("IdPlazoFijo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("PlazoFijo", (string)null);
                });

            modelBuilder.Entity("Tarjeta", b =>
                {
                    b.Property<int>("IdTarjeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTarjeta"));

                    b.Property<int>("CodigoV")
                        .HasColumnType("int");

                    b.Property<float>("Consumos")
                        .HasColumnType("real");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<float>("Limite")
                        .HasColumnType("real");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("IdTarjeta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Tarjeta", (string)null);
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBloqueado")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            IdUsuario = 1,
                            Apellido = "admin",
                            Clave = "123",
                            Dni = 2,
                            IntentosFallidos = 0,
                            IsAdmin = true,
                            IsBloqueado = false,
                            Mail = "admin@admin.com",
                            Nombre = "admin"
                        });
                });

            modelBuilder.Entity("CajaAhorroUsuario", b =>
                {
                    b.HasOne("CajaDeAhorro", "CajaDeAhorro")
                        .WithMany("CajaAhorroUsuarios")
                        .HasForeignKey("IdCajaAhorro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany("CajaAhorroUsuarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CajaDeAhorro");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Movimiento", b =>
                {
                    b.HasOne("CajaDeAhorro", "CajaDeAhorro")
                        .WithMany("Movimientos")
                        .HasForeignKey("IdCajaAhorro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CajaDeAhorro");
                });

            modelBuilder.Entity("Pago", b =>
                {
                    b.HasOne("Usuario", "Usuario")
                        .WithMany("Pagos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlazoFijo", b =>
                {
                    b.HasOne("Usuario", "Usuario")
                        .WithMany("PlazosFijos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tarjeta", b =>
                {
                    b.HasOne("Usuario", "usuario")
                        .WithMany("Tarjetas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("CajaDeAhorro", b =>
                {
                    b.Navigation("CajaAhorroUsuarios");

                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Navigation("CajaAhorroUsuarios");

                    b.Navigation("Pagos");

                    b.Navigation("PlazosFijos");

                    b.Navigation("Tarjetas");
                });
#pragma warning restore 612, 618
        }
    }
}
